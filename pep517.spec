#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : pep517
Version  : 0.8.1
Release  : 2
URL      : https://files.pythonhosted.org/packages/5b/9e/617dabe6ee81a8a85b4f0eb026e0ea37d28e210624df67ceef166e45535b/pep517-0.8.1.tar.gz
Source0  : https://files.pythonhosted.org/packages/5b/9e/617dabe6ee81a8a85b4f0eb026e0ea37d28e210624df67ceef166e45535b/pep517-0.8.1.tar.gz
Summary  : Wrappers to build Python packages using PEP 517 hooks
Group    : Development/Tools
License  : MIT
Requires: pep517-license = %{version}-%{release}
Requires: pep517-python = %{version}-%{release}
Requires: pep517-python3 = %{version}-%{release}
BuildRequires : buildreq-distutils3
BuildRequires : pluggy
BuildRequires : py-python
BuildRequires : pytest
BuildRequires : tox
BuildRequires : virtualenv

%description
`PEP 517 <https://www.python.org/dev/peps/pep-0517/>`_ specifies a standard
API for systems which build Python packages.

This package contains wrappers around the hooks specified by PEP 517. It
provides:

- A mechanism to call the hooks in a subprocess, so they are isolated from
  the current process.
- Fallbacks for the optional hooks, so that frontends can call the hooks without
  checking which are defined.
- Higher-level functions which install the build dependencies into a
  temporary environment and build a wheel/sdist using them.

Run the tests with ``pytest`` or `tox <https://pypi.org/project/tox>`_.

High level usage, with build requirements handled:

.. code-block:: python

    import os
    from pep517.envbuild import build_wheel, build_sdist

    src = 'path/to/source'  # Folder containing 'pyproject.toml'
    destination = 'also/a/folder'
    whl_filename = build_wheel(src, destination)
    assert os.path.isfile(os.path.join(destination, whl_filename))

    targz_filename = build_sdist(src, destination)
    assert os.path.isfile(os.path.join(destination, targz_filename))

Lower level usageâ€”you are responsible for ensuring build requirements are
available:

.. code-block:: python

    import os
    import toml
    from pep517.wrappers import Pep517HookCaller

    src = 'path/to/source'  # Folder containing 'pyproject.toml'
    with open(os.path.join(src, 'pyproject.toml')) as f:
        build_sys = toml.load(f)['build-system']

    print(build_sys['requires'])  # List of static requirements

    hooks = Pep517HookCaller(
        src, 
        build_backend=build_sys['build_backend'],
        backend_path=build_sys.get('backend-path'),
    )

    config_options = {}   # Optional parameters for backend
    # List of dynamic requirements:
    print(hooks.get_requires_for_build_wheel(config_options))

    destination = 'also/a/folder'
    whl_filename = hooks.build_wheel(destination, config_options)
    assert os.path.isfile(os.path.join(destination, whl_filename))

To test the build backend for a project, run in a system shell:

.. code-block:: shell

    python3 -m pep517.check path/to/source  # source dir containing pyproject.toml

To build a backend into source and/or binary distributions, run in a shell:

.. code-block:: shell

    python -m pep517.build path/to/source  # source dir containing pyproject.toml

This 'build' module should be considered experimental while the PyPA `decides
on the best place for this functionality
<https://github.com/pypa/packaging-problems/issues/219>`_.

%package license
Summary: license components for the pep517 package.
Group: Default

%description license
license components for the pep517 package.


%package python
Summary: python components for the pep517 package.
Group: Default
Requires: pep517-python3 = %{version}-%{release}

%description python
python components for the pep517 package.


%package python3
Summary: python3 components for the pep517 package.
Group: Default
Requires: python3-core
Provides: pypi(pep517)

%description python3
python3 components for the pep517 package.


%prep
%setup -q -n pep517-0.8.1
cd %{_builddir}/pep517-0.8.1

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1583201581
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FCFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export CXXFLAGS="$CXXFLAGS -O3 -ffat-lto-objects -flto=4 "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/pep517
cp %{_builddir}/pep517-0.8.1/LICENSE %{buildroot}/usr/share/package-licenses/pep517/b2f7e71b77f14f21cd693e1c6fbe7236a8deac5f
cp %{_builddir}/pep517-0.8.1/tests/samples/pkg1/pkg1-0.5.dist-info/LICENSE %{buildroot}/usr/share/package-licenses/pep517/b2f7e71b77f14f21cd693e1c6fbe7236a8deac5f
cp %{_builddir}/pep517-0.8.1/tests/samples/pkg2/pkg2-0.5.dist-info/LICENSE %{buildroot}/usr/share/package-licenses/pep517/b2f7e71b77f14f21cd693e1c6fbe7236a8deac5f
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----

%files
%defattr(-,root,root,-)

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/pep517/b2f7e71b77f14f21cd693e1c6fbe7236a8deac5f

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
